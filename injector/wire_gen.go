// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/ariwiraa/my-gram/config"
	"github.com/ariwiraa/my-gram/handler"
	"github.com/ariwiraa/my-gram/repository"
	"github.com/ariwiraa/my-gram/routes"
	"github.com/ariwiraa/my-gram/usecase"
	"github.com/gin-gonic/gin"
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
)

// Injectors from injector.go:

func initializedUserHandler() handler.UserHandler {
	db := config.InitializeDB()
	userRepository := repository.NewUserRepository(db)
	userUsecase := usecase.NewUserUsecase(userRepository)
	validate := validator.New()
	userHandler := handler.NewUserHandler(userUsecase, validate)
	return userHandler
}

func initializedPhotoHandler() handler.PhotoHandler {
	db := config.InitializeDB()
	photoRepository := repository.NewPhotoRepository(db)
	photoUsecase := usecase.NewPhotoUsecase(photoRepository)
	validate := validator.New()
	photoHandler := handler.NewPhotoHandler(photoUsecase, validate)
	return photoHandler
}

func InitializedServer() *gin.Engine {
	userHandler := initializedUserHandler()
	photoHandler := initializedPhotoHandler()
	engine := routes.NewRouter(userHandler, photoHandler)
	return engine
}

// injector.go:

var userSet = wire.NewSet(repository.NewUserRepository, usecase.NewUserUsecase, handler.NewUserHandler)

var photoSet = wire.NewSet(repository.NewPhotoRepository, usecase.NewPhotoUsecase, handler.NewPhotoHandler)
